# This example gets the routing history information via the data service API
# and merges it for the various instances that are supplied below
# Two files are written 
# RoutingHistoryOutputFile: the combined routing history information for all the instances
# ExternalRates - file resembling what FileRouter can read as external rates override (but node names 
#             instead of node IDs are written)

%Lifecycle::Lite = (

  Name		=> 'PhEDEx Lifecycle Agent', # don't worry about this
  NCycles       => -1,
  
  Templates => {
  
#   A template named RouterHistory
    'RouterHistory' => {    
      CycleTime => 20, # how often to start a new WF
      
#     Set the events that you want to call
      Events			=> [ 'RouterHistory', 'DumpHistory' ],
      Intervals => {
         # if you have multiple events, you can specify how often to call these vents
         RouterHistory		=> 1,
         DumpHistory		=> 5,
      },
    }
  },

  Defaults => {
    Namespace	=> 'PHEDEX::Testbed::Lifecycle',
    Module => {
	RouterHistory		=> 'Datasvc',
	DumpHistory		=> 'Datasvc',
    },

    Datasvc     => { # parameters for the Datasvc module constructor
	url      => 'https://cmsweb.cern.ch/phedex/datasvc',	# Default: https://cmsweb.cern.ch/phedex/datasvc
	instance => 'dev',					# Default: prod
	
#      Set up your proxy by running 'voms-proxy-init --voms cms --valid 192:00'
	cert_file => $ENV{X509_USER_PROXY} || "/tmp/x509up_u$<",                                                                                                                                                                                      key_file  => $ENV{X509_USER_PROXY} || "/tmp/x509up_u$<",
        ca_file   => $ENV{X509_USER_PROXY} || "/tmp/x509up_u$<",
        ca_dir    => $ENV{X509_CERT_DIR}   || '/afs/cern.ch/project/gd/LCG-share2/certificates',
    }
                                                 
  },

  Workflows => [
#   Workflow based on RouterHistory
    {
      Name			=> 'Router history',
      Template			=> 'RouterHistory',
      Suspend			=> 0,
      
#     Router history parameters
      
      RouterHistoryOutputFile 	=> 'history.output',
      ExternalRatesFile		=> 'external.rates',
      RouterHistoryInstances	=> ['prod', 'dev'],      	      
    }
  ],
);

1;
